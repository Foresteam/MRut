import type { IUser } from './Common';

export const en = {
  language: 'English',
  main: 'Main',
  ok: 'Ok',
  error: 'Error',
  cancel: 'Cancel',
  tabs: {
    main: 'Main',
    files: 'Files',
    screenView: 'Screen view',
    settings: 'Settings',
  },
  enterACommand: 'Enter a command',
  users: 'Users',
  logs: 'Logs',
  emptyPath: 'Here must\'ve been path...',
  places: 'Places',
  devices: 'Devices',
  emptyList: 'No available options',
  emptyUser: [
    'No user',
    'selected',
  ],
  applyToAll: 'Apply to all',
  fileContext: {
    buttonRun: 'Run',
    buttonRunAsScript: 'Run as script',
    buttonDownload: 'Download',
    buttonMove: 'Move',
    buttonCopy: 'Copy',
    buttonRename: 'Rename',
    buttonDelete: 'Delete',
  },
  mainView: {
    userContext: {
      rename: {
        label: 'Rename',
        prompt: {
          text: 'Enter new name',
          title: (user: IUser) => `User#${user.id} ${user.name || user.hostname} (${user.address})`,
        },
      },
    },
    runCommandsFromFile: {
      title: 'Run commands from file',
      help: [
        'Execute primitive script: simply text file with list of commands separated by new line.',
        'Execute JS code: JavaScript code, where final statement should be array of strings - the commands to execute.',
        'Available functions in JS: Log, LogError - varArg functions that accept any arguments and log to the UI',
        'Examples of both methods you can view in commands-examples on GitHub',
      ],
      selectFileSimpleButtonText: 'Simple script',
      selectFileJsButtonText: 'JS code',
    },
  },
  fileManager: {
    topPanel: {
      buttonBack: 'Back',
      buttonForward: 'Forward',
      buttonToTop: 'To top',
      buttonRefresh: 'Refresh',
      buttonUpload: 'Upload',
    },
    new: {
      newFolder: 'New folder',
      newFile: 'New file',
      dialog: {
        newFileQuery: 'Enter name of the new file',
        newFolderQuery: 'Enter name of the new folder',
      },
    },
    deleteFilesQuery: (files: number) => `Delete ${files} file(s)? It can't be undone`,
    failedToDeleteFiles: (files: string[], userId: number | string) => `Couldn't delete ${files.join(', ')} for user #${userId}`,
    failedToCopyFiles: (files: string[], userId: number | string) => `Couldn't copy ${files.join(', ')} for user #${userId}`,
    failedToMoveFiles: (files: string[], userId: number | string) => `Couldn't move ${files.join(', ')} for user #${userId}`,
    dialog: {
      copyFilesTitle: 'Copy files',
      copyFilesQuery: 'Enter destination',
      moveFilesTitle: 'Move files',
      moveFilesQuery: 'Enter destination',
      renameFilesTitle: (count: number) => `Rename ${count} file(s)`,
    },
  },
  screenView: {
    captureControls: 'Capture controls',
    takeoverControls: 'Takeover controls',
    misc: {
      messageBox: 'Send Message box',
      textInput: 'Request text input',
    },
  },
  textInputResults: {
    successFeedback: (reply: string) => `The user sent: ${reply}`,
  },
  messageBoxDialog: {
    title: 'Send message box',
    typesLabel: 'Dialog type',
    types: ['Ok', 'Confirm'],
    titlePlaceholder: 'Title',
    textPlaceholder: 'Text',
    iconsLabel: 'Icon',
    icons: ['Blank', 'Info', 'Question', 'Warning', 'Error'],
    results: {
      error: 'Unknown error has occured',
      success: (value: boolean) => `User responded ${value ? 'YES' : 'NO'}`,
    },
  },
  placeSelected: 'Place selected',
  deviceSelected: 'Device selected',
  confirmation: 'Confirmation',
  success: 'Success',
  filesDownloaded: 'Files downloaded',
  fileSizePositive: 'File size cannot be negative',
  newFileName: 'Enter new filename',
  newFileNameHelp: '\'#\' will be replaced with number, if multiple files are selected',
  settingsTab: {
    resetDb: 'Clear cache',
    resetDbTooltip: 'Clears the DB (if something is glitchy or whatever)',
    openConfigFolder: 'Open data folder',
    openConfigFolderTooltip: 'Open application data folder (logs, db, certificates)',
    updateCertificates: 'Update certificates',
    updateCertificatesTooltip: 'Update server certificates',
    switchThemeTooltip: 'Switch theme',
    themeLightCaption: 'Light theme',
    themeDarkCaption: 'Dark theme',
  },

  serverLogs: {
    clientConnected: 'Client connected',
    clientDisconnected: 'Client lost connection',
    generateCertificatesErrorOpenssl: 'Could not generate certificates: OpenSSL not found',
    generateCertificatesError: 'Could not generate certificates',
    serverStarted: 'Server started',
    serverStartError: 'Failed to start server',

    failedToOpenFolder: 'Failed to open folder',
    dbCleared: 'DB cleared',
    certificatesRegenerated: 'Certificates regenerated',

    runFileInvalidResult: 'Run from file: Invalid return type (expected array of string)',
    runFileError: 'Run from file: script error',
  },
  commands: {
    download: 'Download remote file',
    upload: 'Upload local file',
    frun: 'Execute Lua code from file on server (your computer)',
    exec: 'Execute system command, as subprocess',
    listdisks: 'List disks (Windows only)',
    listdir: 'List directory',
    listplaces: 'List places (home, photos, etc.)',
    mkdir: 'Create directory',
    touch: 'Create file',
    delete: 'Delete file/directory, recursively',
    move: 'Move file/directory',
    copy: 'Copy file/directory',
    rename: 'Rename file/directory',
    logs: 'Print logs',
    mouselock: 'Set mouse input lock',
    keyboardlock: 'Set keyboard input lock',
    prompt: 'Request text input',
    alertconfirm: 'Set keyboard input lock',
    alertok: 'Set keyboard input lock',
    help: 'Print help',
    run: 'Execute Lua code',
  },
};
const ru = {
  language: 'Русский',
  main: 'Основные',
  ok: 'Ок',
  error: 'Ошибка',
  cancel: 'Отмена',
  tabs: {
    main: 'Главная',
    files: 'Файлы',
    screenView: 'Просмотр экрана',
    settings: 'Настройки',
  },
  enterACommand: 'Введите команду',
  users: 'Пользователи',
  logs: 'Логи',
  emptyPath: 'Здесь должен был быть путь...',
  places: 'Места',
  devices: 'Устройства',
  emptyList: 'Здесь пусто',
  emptyUser: [
    'Пользователь',
    'не выбран',
  ],
  applyToAll: 'Применить ко всем',
  fileContext: {
    buttonRun: 'Запустить',
    buttonRunAsScript: 'Запустить как скрипт',
    buttonDownload: 'Скачать',
    buttonMove: 'Переместить',
    buttonCopy: 'Скопировать',
    buttonRename: 'Переименовать',
    buttonDelete: 'Удалить',
  },
  mainView: {
    userContext: {
      rename: {
        label: 'Переименовать',
        prompt: {
          text: 'Введите новое имя',
          title: (user: IUser) => `Пользователь#${user.id} ${user.name || user.hostname} (${user.address})`,
        },
      },
    },
    runCommandsFromFile: {
      title: 'Выполнить команды из файла',
      help: [
        'Выполнить примитивный скрипт: просто текстовый файл со списком команд, разделенных по строкам.',
        'Выполнить код JS: код JavaScript, где конечный оператор должен быть массивом строк - команд для выполнения.',
        'Доступные функции в JS: Log, LogError - функции varArg, которые принимают любые аргументы и отправляют лог в пользовательский интерфейс',
        'Примеры обоих вариантов скрипов можно посмотреть в commands-examples на GitHub',
      ],
      selectFileSimpleButtonText: 'Простой скрипт',
      selectFileJsButtonText: 'JS-код',
    },
  },
  fileManager: {
    topPanel: {
      buttonBack: 'Назад',
      buttonForward: 'Вперед',
      buttonToTop: 'Наверх',
      buttonRefresh: 'Обновить',
      buttonUpload: 'Загрузить',
    },
    new: {
      newFolder: 'Новая папка',
      newFile: 'Новый файл',
      dialog: {
        newFileQuery: 'Введите имя нового файла',
        newFolderQuery: 'Введите имя новой папки',
      },
    },
    deleteFilesQuery: (files: number) => `Удалить ${files} файл(ов)? Это действие необратимо`,
    failedToDeleteFiles: (files: string[], userId: number | string) => `Не удалось удалить ${files.join(', ')} у пользователя #${userId}`,
    failedToCopyFiles: (files: string[], userId: number | string) => `Не удалось скопировать ${files.join(', ')} у пользователя #${userId}`,
    failedToMoveFiles: (files: string[], userId: number | string) => `Не удалось переместить ${files.join(', ')} у пользователя #${userId}`,
    dialog: {
      copyFilesTitle: 'Скопировать файлы',
      copyFilesQuery: 'Введите путь к целевой директории',
      moveFilesTitle: 'Переместить файлы',
      moveFilesQuery: 'Введите путь к целевой директории',
      renameFilesTitle: (count: number) => `Переименование ${count} файла(ов)`,
    },
  },
  screenView: {
    captureControls: 'Передача управления',
    takeoverControls: 'Захват управления',
    misc: {
      messageBox: 'Отправить Message box',
      textInput: 'Запросить текстовый ввод',
    },
  },
  textInputResults: {
    successFeedback: (reply: string) => `Пользователь ответил: ${reply}`,
  },
  messageBoxDialog: {
    title: 'Отправить окно с сообщением',
    typesLabel: 'Тип окна',
    types: ['Ок', 'Подтверждение'],
    titlePlaceholder: 'Заголовок',
    textPlaceholder: 'Текст',
    iconsLabel: 'Иконка',
    icons: ['Нет', 'Информация', 'Вопрос', 'Предупреждение', 'Ошибка'],
    results: {
      error: 'Произошла непредвиденная ошибка',
      success: (value: boolean) => `Пользователь выбрал ${value ? 'ДА' : 'НЕТ'}`,
    },
  },
  placeSelected: 'Место выбрано',
  deviceSelected: 'Устройство выбрано',
  confirmation: 'Подтверждение',
  success: 'Успех',
  filesDownloaded: 'Файлы скачаны',
  fileSizePositive: 'Размер файла не может быть отрицательным',
  newFileName: 'Введите новое имя файла',
  newFileNameHelp: '\'#\' будет заменено числом, если выбрано несколько файлов',
  settingsTab: {
    resetDb: 'Очистить кеш',
    resetDbTooltip: 'Очистить базу данных (например, если что-то глючит)',
    openConfigFolder: 'Открыть папку с данными программы',
    openConfigFolderTooltip: 'Открыть папку с данными программы (логи, БД, сертификаты)',
    updateCertificates: 'Обновить сертификаты',
    updateCertificatesTooltip: 'Обновить серверные сертификаты',
    switchThemeTooltip: 'Переключить тему',
    themeLightCaption: 'Светлая тема',
    themeDarkCaption: 'Темная тема',
  },

  serverLogs: {
    clientConnected: 'Клиент подключился',
    clientDisconnected: 'Клиент отключился',
    generateCertificatesErrorOpenssl: 'Не удалось сгенерировать сертификаты: OpenSSL не найден',
    generateCertificatesError: 'Не удалось сгенерировать сертификаты',
    serverStarted: 'Сервер запущен',
    serverStartError: 'Не удалось запустить сервер',

    failedToOpenFolder: 'Не удалось открыть папку',
    dbCleared: 'База данных очищена',
    certificatesRegenerated: 'Сертификаты обновлены',

    runFileInvalidResult: 'Запуск из файла: Неправильный тип возвращаемого значения (ожидался массив строк)',
    runFileError: 'Запуск из файла: ошибка в коде',
  },
  commands: {
    download: 'Скачать файл с удаленного компьютера',
    upload: 'Загрузить файл на удаленный компьютер',
    frun: 'Выполнить Lua-код на удаленном ПК из файла на сервере (с вашего компьютера)',
    exec: 'Выполнить системную команду как подпроцесс',
    listdisks: 'Показать диски (только Windows)',
    listdir: 'Показать содержимое каталога',
    listplaces: 'Показать избранные места (домашняя папка, фото и т.д.)',
    mkdir: 'Создать каталог',
    touch: 'Создать файл',
    delete: 'Удалить файл/каталог (рекурсивно)',
    move: 'Переместить файл/каталог',
    copy: 'Копировать файл/каталог',
    rename: 'Переименовать файл/каталог',
    logs: 'Вывести логи клиентов',
    mouselock: 'Заблокировать ввод мыши удаленного ПК',
    keyboardlock: 'Заблокировать ввод с клавиатуры удаленного ПК',
    prompt: 'Запросить текстовый ввод',
    alertconfirm: 'Показать окно подтверждения',
    alertok: 'Показать окно уведомления',
    help: 'Показать справку',
    run: 'Выполнить Lua-код (строку)',
  },
} satisfies typeof en;

export const activeLanguage = (russian: boolean) => russian ? ru : en;